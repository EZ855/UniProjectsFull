// Algorithms to design electrical grids

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "Graph.h"
#include "Place.h"
#include "PQ.h"

////////////////////////////////////////////////////////////////////////
// Your task

/**
 * Designs  a minimal cost electrical grid that will deliver electricity
 * from a power plant to all the given cities. Power lines must be built
 * between cities or between a city and a power plant.  Cost is directly
 * proportional to the total length of power lines used.
 * Assumes  that  numCities  is at least 1 (numCities is the size of the
 * cities array).
 * Stores the power lines that need to be built in the given  powerLines
 * array, and returns the number of power lines stored. Assumes that the
 * powerLines array is large enough to store all required power lines.
 */
int planGrid1(Place cities[], int numCities, Place powerPlant,
              PowerLine powerLines[]) {
    // TODO: Complete this function
    
    // Creating a new graph to represent powerplant + cities and potential powerlines
    Graph g = GraphNew(numCities + 1);

    // Inserts edge/powerline between all cities
    for (int i = 0; i < numCities; i++) {
        for (int j = i + 1; j < numCities; j++) {
            
            Edge e;
            e.v = i;
            e.w = j;
            e.weight = sqrt(pow(cities[i].x - cities[j].x, 2) + 
                            pow(cities[i].y - cities[j].y, 2));
            GraphInsertEdge(g, e);
        }
        // Inserts edge/powerline between all cities and powerplant
        Edge e;
        e.v = i;
        e.w = numCities;
        e.weight = sqrt(pow(cities[i].x - powerPlant.x, 2) + 
                        pow(cities[i].y - powerPlant.y, 2));
        GraphInsertEdge(g, e);
    }

    // Get lowest cost of powerlines with GraphMST
    Graph MST = GraphMST(g);

    GraphFree(g);
    int num_powerlines = 0;
    // If there is a minimum spanning tree
    if (MST != NULL) {
        // Goes through each edge and checks whether it connects to each other edge
        for (int i = 0; i < numCities + 1; i++) {
            for (int j = i + 1; j < numCities + 1; j++) {
                double adjacent_weight = GraphIsAdjacent(MST, i, j);
                if (adjacent_weight != 0) {
                    PowerLine p;
                    p.p1 = cities[i];
                    if (j == numCities) {
                        p.p2 = powerPlant;
                    }
                    else {
                        p.p2 = cities[j];
                    }
                    powerLines[num_powerlines] = p;
                    num_powerlines++;
                }
            }
        }
    }
    GraphFree(MST);
    return num_powerlines;
}

////////////////////////////////////////////////////////////////////////
// Optional task

/**
 * Designs  a minimal cost electrical grid that will deliver electricity
 * to all the given cities.  Power lines must be built between cities or
 * between a city and a power plant.  Cost is directly  proportional  to
 * the  total  length of power lines used.  Assume that each power plant
 * generates enough electricity to supply all cities, so not  all  power
 * plants need to be used.
 * Assumes  that  numCities and numPowerPlants are at least 1 (numCities
 * and numPowerPlants are the sizes of the cities and powerPlants arrays
 * respectively).
 * Stores the power lines that need to be built in the given  powerLines
 * array, and returns the number of power lines stored. Assumes that the
 * powerLines array is large enough to store all required power lines.
 */
int planGrid2(Place cities[], int numCities,
              Place powerPlants[], int numPowerPlants,
              PowerLine powerLines[]) {
    // TODO: Complete this function
    return 0;
}
