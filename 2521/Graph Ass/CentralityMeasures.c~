// Centrality Measures API implementation
// COMP2521 Assignment 2

#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#include "CentralityMeasures.h"
#include "Dijkstra.h"
#include "Graph.h"

double *closenessCentrality(Graph g) {
	// Getting number of vertices
    int v = GraphNumVertices(g);

    // Mallocing vSet/closeness array
    double *vSet = malloc(sizeof(double) * v);
    
    // For every vertex, gets shortest distance and number reachable
    // using Dijkstra function
    for (int i = 0; i < v; i++) {
        NodeData *result = dijkstra(g, i);
        
        double distance_sum = 0;
        double n = 0;
        double N = v;
        // Goes through list and gets total distance and number
        // reachable
        for (int j = 0; j < v; j++) {
            if (result[j].dist != INFINITY) {
                distance_sum += result[j].dist;
                n++;
            }
        }
        
        vSet[i] = ((n-1)/(N-1)) * ((n-1)/(distance_sum));
        freeNodeData(result, v);
    }
    
    return vSet;
}

double *betweennessCentrality(Graph g) {
	// Getting number of vertices
    int v = GraphNumVertices(g);

    // Mallocing vSet/Betweenness array
    double *vSet = malloc(sizeof(double) * v);
    
    
    NodeData *all_results[v];
    
    // For each vertex, puts Dijkstra function result into array all_results
    for (int i = 0; i < v; i++) {
        all_results[i] = dijkstra(g, i);
    }
    
    // For each vertex, goes through entire Dijkstra results list and looks for
    // when the vertex is part of a shortest path (and is not the start or end
    // vertex)
    for (int i = 0; i < v; i++) {
    
        vSet[i] = 0;
        
        // Goes through each node in the result array return from dijkstra.
        for (int j = 0; j < v; j++) {
            // Goes through each predecessor list in each NodeData
            for (int k = 0; k < v; k++) {
            
                double current_vSet = 0;
                double num_pred = 0;
                PredNode *current = all_results[j][k].pred;
                
                // Skips when current vertex is end and start node and when there
                // is no predecessor (i.e. start and end are the same)
                if (i != j && i != k && current != NULL) {
                    // Iterating through predecessor list
                    while (current != NULL) {
                        num_pred++;
                        Vertex curr = current->v;
                        // Traverses shortest path to k from j through current pred
                        while (curr != j) {
                            // If the current predecessor is i and it's not the last
                            // in the list, increments it's sigma_stv
                            if (curr == i) {
                                current_vSet++;
                            }
                            curr = all_results[j][curr].pred->v;
                        }
                        current = current->next;
                    }
                }
                if (num_pred != 0) {
                    vSet[i] += current_vSet/num_pred;
                }
            }
        }
    }
    
    // Frees each vertex's resulting node array
    for (int i = 0; i < v; i++) {
        freeNodeData(all_results[i], v);
    }
    
    return vSet;
}

