// Lance-Williams Algorithm for Hierarchical Agglomerative Clustering
// COMP2521 Assignment 2

#include <assert.h>
#include <float.h>
#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#include "Graph.h"
#include "LanceWilliamsHAC.h"

#define INFINITY DBL_MAX


/**
 * Generates  a Dendrogram using the Lance-Williams algorithm (discussed
 * in the spec) for the given graph  g  and  the  specified  method  for
 * agglomerative  clustering. The method can be either SINGLE_LINKAGE or
 * COMPLETE_LINKAGE (you only need to implement these two methods).
 * 
 * The function returns a 'Dendrogram' structure.
 */
Dendrogram LanceWilliamsHAC(Graph g, int method) {
    /*
    
    typedef struct *Cluster {
	int *d_array;
	Dendrogram payload;
	Cluster next;
} Cluster;
    // Calculating update
    if (method == SINGLE_LINKAGE) {
        update = 0.5 * (Dki + Dkj - abs(Dki - Dkj));
    }
    else if (method == COMPLETE_LINKAGE) {
        update = 0.5 * (Dki + Dkj + abs(Dki - Dkj));
    }
    
    // Getting number of vertices
    int v = GraphNumVertices(g);
    
    // Initialise distance array with DBL_MAX
    Cluster head = 
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            d[i][j] = DBL_MAX;
        }
    }
    
    // Setting up rest of distance array
    for (int i = 0; i < v; i++) {
        d[i][i] = 0;
        
        AdjList out = GraphOutIncident(g, i);
        while (out != NULL) {
            d[i][out->v] = out->weight;
        }
    }
    
    for (int i = 0; i < v; i++) {
        
    }
    
    */
    return NULL;
}

Dendrogram new_dendrogram_node(int v, Dendrogram r, Dendrogram l) {
    Dendrogram new = malloc(sizeof(Dendrogram));
    new->vertex = v;
	new->right = r;
	new->left = l;
	return new;
}

Dendrogram new_cluster_node(Dendrogram pl, int * d_a, Cluster n) {
    Cluster new = malloc(sizeof(Cluster));
	new->d_array = d_a;
	new->payload = pl;
	new->next = n;
	return new;
}

