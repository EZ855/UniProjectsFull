#include "invertedIndex.h"
// Helper function for InsertTfIdfNode - finds whether two idfs are equal or not.
int compare_float(double x, double y, double epsilon);

// Finds matching word node given a word and returns it. Returns NULL otherwise.
InvertedIndexBST FindWordNode(char *w, InvertedIndexBST tree);

// If word doesn't exist in BST, inserts it in order at leaf node.
void InsertWordNode(char *w, InvertedIndexBST tree, InvertedIndexBST wn);

// Returns matching file node or NULL if matching file node not found
FileList FindFileNode(FileList F, char *fn);

// Inserts file node in alphabetical order into a file list, returns file list with added node
FileList InsertFileNode(FileList F, char *fn, FileList FN);


void NavigateAndDivide(InvertedIndexBST t, char *fn, int count);

TfIdfList InsertTfIdfNode(TfIdfList L, char *fn, TfIdfList TIN);

TfIdfList FindTfIdfNode(TfIdfList L, char *fn);
